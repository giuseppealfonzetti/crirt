// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// extract_params_idx_irt
std::vector<unsigned int> extract_params_idx_irt(Eigen::VectorXd THETA_IRT, const unsigned int N_GRADES, const unsigned int N_EXAMS, const unsigned int OPTION, const unsigned int EXAM);
RcppExport SEXP _crirt_extract_params_idx_irt(SEXP THETA_IRTSEXP, SEXP N_GRADESSEXP, SEXP N_EXAMSSEXP, SEXP OPTIONSEXP, SEXP EXAMSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type THETA_IRT(THETA_IRTSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type N_GRADES(N_GRADESSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type N_EXAMS(N_EXAMSSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type OPTION(OPTIONSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type EXAM(EXAMSEXP);
    rcpp_result_gen = Rcpp::wrap(extract_params_idx_irt(THETA_IRT, N_GRADES, N_EXAMS, OPTION, EXAM));
    return rcpp_result_gen;
END_RCPP
}
// extract_params_irt
Eigen::VectorXd extract_params_irt(Eigen::VectorXd THETA_IRT, const unsigned int N_GRADES, const unsigned int N_EXAMS, const unsigned int OPTION, const unsigned int EXAM);
RcppExport SEXP _crirt_extract_params_irt(SEXP THETA_IRTSEXP, SEXP N_GRADESSEXP, SEXP N_EXAMSSEXP, SEXP OPTIONSEXP, SEXP EXAMSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type THETA_IRT(THETA_IRTSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type N_GRADES(N_GRADESSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type N_EXAMS(N_EXAMSSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type OPTION(OPTIONSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type EXAM(EXAMSEXP);
    rcpp_result_gen = Rcpp::wrap(extract_params_irt(THETA_IRT, N_GRADES, N_EXAMS, OPTION, EXAM));
    return rcpp_result_gen;
END_RCPP
}
// pGreaterGrades
double pGreaterGrades(const unsigned int GRADE, const unsigned int EXAM, Eigen::VectorXd& THETA_IRT, const unsigned int N_GRADES, const unsigned int N_EXAMS, const double ABILITY, const bool LOGFLAG);
RcppExport SEXP _crirt_pGreaterGrades(SEXP GRADESEXP, SEXP EXAMSEXP, SEXP THETA_IRTSEXP, SEXP N_GRADESSEXP, SEXP N_EXAMSSEXP, SEXP ABILITYSEXP, SEXP LOGFLAGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type GRADE(GRADESEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type EXAM(EXAMSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type THETA_IRT(THETA_IRTSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type N_GRADES(N_GRADESSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type N_EXAMS(N_EXAMSSEXP);
    Rcpp::traits::input_parameter< const double >::type ABILITY(ABILITYSEXP);
    Rcpp::traits::input_parameter< const bool >::type LOGFLAG(LOGFLAGSEXP);
    rcpp_result_gen = Rcpp::wrap(pGreaterGrades(GRADE, EXAM, THETA_IRT, N_GRADES, N_EXAMS, ABILITY, LOGFLAG));
    return rcpp_result_gen;
END_RCPP
}
// gr_pGreaterGrades
Eigen::VectorXd gr_pGreaterGrades(const unsigned int GRADE, const unsigned int EXAM, Eigen::VectorXd& THETA_IRT, const unsigned int N_GRADES, const unsigned int N_EXAMS, const double ABILITY);
RcppExport SEXP _crirt_gr_pGreaterGrades(SEXP GRADESEXP, SEXP EXAMSEXP, SEXP THETA_IRTSEXP, SEXP N_GRADESSEXP, SEXP N_EXAMSSEXP, SEXP ABILITYSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type GRADE(GRADESEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type EXAM(EXAMSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type THETA_IRT(THETA_IRTSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type N_GRADES(N_GRADESSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type N_EXAMS(N_EXAMSSEXP);
    Rcpp::traits::input_parameter< const double >::type ABILITY(ABILITYSEXP);
    rcpp_result_gen = Rcpp::wrap(gr_pGreaterGrades(GRADE, EXAM, THETA_IRT, N_GRADES, N_EXAMS, ABILITY));
    return rcpp_result_gen;
END_RCPP
}
// pGrade
double pGrade(const unsigned int GRADE, const unsigned int EXAM, Eigen::VectorXd& THETA_IRT, const unsigned int N_GRADES, const unsigned int N_EXAMS, const double ABILITY, const bool LOGFLAG);
RcppExport SEXP _crirt_pGrade(SEXP GRADESEXP, SEXP EXAMSEXP, SEXP THETA_IRTSEXP, SEXP N_GRADESSEXP, SEXP N_EXAMSSEXP, SEXP ABILITYSEXP, SEXP LOGFLAGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type GRADE(GRADESEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type EXAM(EXAMSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type THETA_IRT(THETA_IRTSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type N_GRADES(N_GRADESSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type N_EXAMS(N_EXAMSSEXP);
    Rcpp::traits::input_parameter< const double >::type ABILITY(ABILITYSEXP);
    Rcpp::traits::input_parameter< const bool >::type LOGFLAG(LOGFLAGSEXP);
    rcpp_result_gen = Rcpp::wrap(pGrade(GRADE, EXAM, THETA_IRT, N_GRADES, N_EXAMS, ABILITY, LOGFLAG));
    return rcpp_result_gen;
END_RCPP
}
// gr_pGrade
Eigen::VectorXd gr_pGrade(const unsigned int GRADE, const unsigned int EXAM, Eigen::VectorXd& THETA_IRT, const unsigned int N_GRADES, const unsigned int N_EXAMS, const double ABILITY);
RcppExport SEXP _crirt_gr_pGrade(SEXP GRADESEXP, SEXP EXAMSEXP, SEXP THETA_IRTSEXP, SEXP N_GRADESSEXP, SEXP N_EXAMSSEXP, SEXP ABILITYSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type GRADE(GRADESEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type EXAM(EXAMSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type THETA_IRT(THETA_IRTSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type N_GRADES(N_GRADESSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type N_EXAMS(N_EXAMSSEXP);
    Rcpp::traits::input_parameter< const double >::type ABILITY(ABILITYSEXP);
    rcpp_result_gen = Rcpp::wrap(gr_pGrade(GRADE, EXAM, THETA_IRT, N_GRADES, N_EXAMS, ABILITY));
    return rcpp_result_gen;
END_RCPP
}
// internal_lat
Rcpp::List internal_lat(const double ABILITY, const double SPEED, Eigen::VectorXd PARS, const bool GRFLAG);
RcppExport SEXP _crirt_internal_lat(SEXP ABILITYSEXP, SEXP SPEEDSEXP, SEXP PARSSEXP, SEXP GRFLAGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type ABILITY(ABILITYSEXP);
    Rcpp::traits::input_parameter< const double >::type SPEED(SPEEDSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type PARS(PARSSEXP);
    Rcpp::traits::input_parameter< const bool >::type GRFLAG(GRFLAGSEXP);
    rcpp_result_gen = Rcpp::wrap(internal_lat(ABILITY, SPEED, PARS, GRFLAG));
    return rcpp_result_gen;
END_RCPP
}
// reparThr
Eigen::VectorXd reparThr(const Eigen::VectorXd& X, bool CON2UN);
RcppExport SEXP _crirt_reparThr(SEXP XSEXP, SEXP CON2UNSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< bool >::type CON2UN(CON2UNSEXP);
    rcpp_result_gen = Rcpp::wrap(reparThr(X, CON2UN));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_crirt_extract_params_idx_irt", (DL_FUNC) &_crirt_extract_params_idx_irt, 5},
    {"_crirt_extract_params_irt", (DL_FUNC) &_crirt_extract_params_irt, 5},
    {"_crirt_pGreaterGrades", (DL_FUNC) &_crirt_pGreaterGrades, 7},
    {"_crirt_gr_pGreaterGrades", (DL_FUNC) &_crirt_gr_pGreaterGrades, 6},
    {"_crirt_pGrade", (DL_FUNC) &_crirt_pGrade, 7},
    {"_crirt_gr_pGrade", (DL_FUNC) &_crirt_gr_pGrade, 6},
    {"_crirt_internal_lat", (DL_FUNC) &_crirt_internal_lat, 4},
    {"_crirt_reparThr", (DL_FUNC) &_crirt_reparThr, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_crirt(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
